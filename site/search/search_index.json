{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Ejercicios1/","text":"Repositorio DEAW Crear un repositorio en vuestro GitHub llamado DEAW. Clonar vuestro repositorio en local. Le metemos mkdocs instal\u00e1ndolo primero. Creamos nuevo proyecto. Podemos modificar el archivo mkdocs.yml con nano Readme Crear en vuestro repositorio local un documento README.md . Agregamos el archivo a nuestro repositorio con git add . Commit Realizar un commit inicial con el comentario Comenzamos con los ejercicios de Git Push Subir los cambios al repositorio remoto Ignorar archivos Crear en el repositorio local un fichero llamado privado.txt Crear en el repositorio local una carpeta llamada privada Realizar los cambios oportunos para que tanto el archivo como la carpeta sean ignorados por git. Debemos crear primero el archivo .gitignore y lo modificamos poniendo lo que nos interese ocultar: Vemos que directamente nos lo oculta: A\u00f1adir fichero 1.txt Creamos primero el archivo de texto con touch 1.txt y comprobamos su estado con git status Posteriormente lo a\u00f1adimos con git add . Crear un tag y subirlo al repositorio remoto Ahora creamos una etiqueta con el comando git tag \"nombre\" y comprobamos que la ha creado list\u00e1ndola con git tag Y hacemos commit de dicho cambio: Cuenta de GitHub Ahora vamos a personalizar la cuenta de GitHub, en cuanto a su apariencia. Concretamente podemos modificar la foto de perfil, que por razones de privacidad no pondr\u00e9 la m\u00eda. Nos ce\u00f1imos a una imagen cualquiera, pero se puede modificar en la siguiente interfaz. Tambi\u00e9n podemos modificar el llamado doble-factor de autenticaci\u00f3n, para tener una capa extra de protecci\u00f3n en nuestra cuenta. Uso social de GitHub Preguntar los nombres de usuario de GitHub de 2 de tus compa\u00f1eros de clase, b\u00fascalos y s\u00edgueles. Seguir los repositorios DEAW del resto de tus compa\u00f1eros. A\u00f1adir una estrella a los repositorios DEAW del resto de tus compa\u00f1eros. Crear una tabla Crear una tabla en el fichero README.md con la informaci\u00f3n b\u00e1sica de los compa\u00f1eros de clase. Colaboradores A\u00f1adir a un compa\u00f1ero de clase como colaborador del repositorio DEAW. Crear una rama v0.2 y a\u00f1adir un fichero 2.txt Crear una rama v0.2 y cambiar a esa rama. Con la opci\u00f3n git checkout -b v0.2 creamos la rama y nos cambiamos autom\u00e1ticamente a ella. Creamos el archivo de texto con touch 2.txt y lo modificamos con nano 2.txt y finalmente comprobamos como siempre con git status Crear rama remota v0.2 Creamos la rama remota con el comando git push -u origin v0.2 Merge Directo Posicionarse en la rama master. Hacer un merge de la rama v0.2 en la rama master. Merge con conflicto En la rama master poner Hola en el fichero 1.txt y hacer commit. Posicionarse en la rama v0.2 y poner Adios en el fichero 1.txt y hacer commit. Posicionarse de nuevo en la rama master y hacer un merge con la rama v0.2 Listado de ramas Arreglar el conflicto Listado de ramas Tenemos varias opciones para ello. Actualmente no me muestra como deber\u00eda por estar usando window con bash en vez de linux:","title":"Ejercicios1"},{"location":"Ejercicios1/#readme","text":"Crear en vuestro repositorio local un documento README.md . Agregamos el archivo a nuestro repositorio con git add .","title":"Readme"},{"location":"Ejercicios1/#commit","text":"Realizar un commit inicial con el comentario Comenzamos con los ejercicios de Git","title":"Commit"},{"location":"Ejercicios1/#push","text":"Subir los cambios al repositorio remoto","title":"Push"},{"location":"Ejercicios1/#ignorar-archivos","text":"Crear en el repositorio local un fichero llamado privado.txt Crear en el repositorio local una carpeta llamada privada Realizar los cambios oportunos para que tanto el archivo como la carpeta sean ignorados por git. Debemos crear primero el archivo .gitignore y lo modificamos poniendo lo que nos interese ocultar: Vemos que directamente nos lo oculta:","title":"Ignorar archivos"},{"location":"Ejercicios1/#anadir-fichero-1txt","text":"Creamos primero el archivo de texto con touch 1.txt y comprobamos su estado con git status Posteriormente lo a\u00f1adimos con git add .","title":"A\u00f1adir fichero 1.txt"},{"location":"Ejercicios1/#crear-un-tag-y-subirlo-al-repositorio-remoto","text":"Ahora creamos una etiqueta con el comando git tag \"nombre\" y comprobamos que la ha creado list\u00e1ndola con git tag Y hacemos commit de dicho cambio:","title":"Crear un tag y subirlo al repositorio remoto"},{"location":"Ejercicios1/#cuenta-de-github","text":"Ahora vamos a personalizar la cuenta de GitHub, en cuanto a su apariencia. Concretamente podemos modificar la foto de perfil, que por razones de privacidad no pondr\u00e9 la m\u00eda. Nos ce\u00f1imos a una imagen cualquiera, pero se puede modificar en la siguiente interfaz. Tambi\u00e9n podemos modificar el llamado doble-factor de autenticaci\u00f3n, para tener una capa extra de protecci\u00f3n en nuestra cuenta.","title":"Cuenta de GitHub"},{"location":"Ejercicios1/#uso-social-de-github","text":"Preguntar los nombres de usuario de GitHub de 2 de tus compa\u00f1eros de clase, b\u00fascalos y s\u00edgueles. Seguir los repositorios DEAW del resto de tus compa\u00f1eros. A\u00f1adir una estrella a los repositorios DEAW del resto de tus compa\u00f1eros.","title":"Uso social de GitHub"},{"location":"Ejercicios1/#crear-una-tabla","text":"Crear una tabla en el fichero README.md con la informaci\u00f3n b\u00e1sica de los compa\u00f1eros de clase.","title":"Crear una tabla"},{"location":"Ejercicios1/#colaboradores","text":"A\u00f1adir a un compa\u00f1ero de clase como colaborador del repositorio DEAW.","title":"Colaboradores"},{"location":"Ejercicios1/#crear-una-rama-v02-y-anadir-un-fichero-2txt","text":"Crear una rama v0.2 y cambiar a esa rama. Con la opci\u00f3n git checkout -b v0.2 creamos la rama y nos cambiamos autom\u00e1ticamente a ella. Creamos el archivo de texto con touch 2.txt y lo modificamos con nano 2.txt y finalmente comprobamos como siempre con git status","title":"Crear una rama v0.2 y a\u00f1adir un fichero 2.txt"},{"location":"Ejercicios1/#crear-rama-remota-v02","text":"Creamos la rama remota con el comando git push -u origin v0.2","title":"Crear rama remota v0.2"},{"location":"Ejercicios1/#merge-directo","text":"Posicionarse en la rama master. Hacer un merge de la rama v0.2 en la rama master.","title":"Merge Directo"},{"location":"Ejercicios1/#merge-con-conflicto","text":"En la rama master poner Hola en el fichero 1.txt y hacer commit. Posicionarse en la rama v0.2 y poner Adios en el fichero 1.txt y hacer commit. Posicionarse de nuevo en la rama master y hacer un merge con la rama v0.2","title":"Merge con conflicto"},{"location":"Ejercicios1/#listado-de-ramas","text":"","title":"Listado de ramas"},{"location":"Ejercicios1/#arreglar-el-conflicto","text":"","title":"Arreglar el conflicto"},{"location":"Ejercicios1/#listado-de-ramas_1","text":"Tenemos varias opciones para ello. Actualmente no me muestra como deber\u00eda por estar usando window con bash en vez de linux:","title":"Listado de ramas"},{"location":"Ejercicios2/","text":"Ejercicios Git y GitHub 2 Ejercicios de Creaci\u00f3n y Actualizaci\u00f3n de Repositorios Ejercicio 1 Configurar Git definiendo el nombre del usuario, el correo electr\u00f3nico y activar el coloreado de la salida. Mostrar la configuraci\u00f3n final: Ejercicio 2 Crear un repositorio nuevo con el nombre libro y mostrar su contenido. Ejercicio 3 Comprobar el estado del repositorio. Crear un fichero indice.txt con el siguiente contenido: Cap\u00edtulo 1: Introducci\u00f3n a Git Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico Cap\u00edtulo 3: Repositorios remotos Comprobar de nuevo el estado del repositorio. A\u00f1adir el fichero a la zona de intercambio temporal. Volver a comprobar una vez m\u00e1s el estado del repositorio. Ejercicio 4 Realizar un commit de los \u00faltimos cambios con el mensaje \"A\u00f1adido \u00edndice del libro\" y ver el estado del repositorio. Ejercicio 5 Cambiar el fichero indice.txt para que contenga lo siguiente: Cap\u00edtulo 1: Introducci\u00f3n a Git Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico Cap\u00edtulo 3: Gesti\u00f3n de ramas Cap\u00edtulo 4: Repositorios remotos Mostrar los cambios con respecto a la \u00faltima versi\u00f3n guardada en el repositorio. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas\u201d. Ejercicio 6 Mostrar los cambios de la \u00faltima versi\u00f3n del repositorio con respecto a la anterior. Cambiar el mensaje del \u00faltimo commit por \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice.\u201d Volver a mostrar los \u00faltimos cambios del repositorio. Ejercicios de manejo del historial de cambios Ejercicio 1 Mostrar el historial de cambios del repositorio. Crear la carpeta capitulos y crear dentro de ella el fichero capitulo1.txt con el siguiente texto. Git es un sistema de control de versiones ideado por Linus Torvalds. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 1.\u201d Volver a mostrar el historial de cambios del repositorio. Ejercicio 2 Crear el fichero capitulo2.txt en la carpeta capitulos con el siguiente texto. El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 2.\u201d Mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores. Ejercicio 3 Crear el fichero capitulo3.txt en la carpeta capitulos con el siguiente texto. Git permite la creaci\u00f3n de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simultanea en ellas. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3.\u201d Mostrar las diferencias entre la primera y la \u00faltima versi\u00f3n del repositorio. Ejercicio 4 A\u00f1adir al final del fichero indice.txt la siguiente l\u00ednea: Cap\u00edtulo 5: Conceptos avanzados A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 5 al \u00edndice.\u201d. Mostrar qui\u00e9n ha hecho cambios sobre el fichero indice.txt. Ejercicios de deshacer cambios Ejercicio 1 Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Comprobar el estado del repositorio. Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero. Volver a comprobar el estado del repositorio. Ejercicio 2 Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. A\u00f1adir los cambios a la zona de intercambio temporal. Comprobar de nuevo el estado del repositorio. Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo. Comprobar de nuevo el estado del repositorio. Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero. Volver a comprobar el estado del repositorio. Ejercicio 3 Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Eliminar el fichero capitulos/capitulo3.txt. A\u00f1adir un fichero nuevo capitulos/capitulo4.txt vac\u00edo. A\u00f1adir los cambios a la zona de intercambio temporal. Comprobar de nuevo el estado del repositorio. Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo. Comprobar de nuevo el estado del repositorio. Deshacer los cambios realizados para volver a la versi\u00f3n del repositorio. Volver a comprobar el estado del repositorio. Ejercicio 4 Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Eliminar el fichero capitulos/capitulo3.txt. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d Comprobar el historial del repositorio. Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal. Comprobar el historial y el estado del repositorio. Volver a hacer el commit con el mismo mensaje de antes. Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio. Comprobar de nuevo el historial y el estado del repositorio. Ejercicios de gesti\u00f3n de ramas Ejercicio 1 Crear una nueva rama bibliografia y mostrar las ramas del repositorio. Ejercicio 2 Crear el fichero capitulos/capitulo4.txt y a\u00f1adir el texto siguiente En este cap\u00edtulo veremos c\u00f3mo usar GitHub para alojar repositorios en remoto. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido cap\u00edtulo 4.\u201d Mostrar la historia del repositorio incluyendo todas las ramas. Ejercicio 3 Cambiar a la rama bibliografia. Crear el fichero bibliografia.txt y a\u00f1adir la siguiente referencia Chacon, S. and Straub, B. Pro Git. Apress. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adida primera referencia bibliogr\u00e1fica.\u201d Mostrar la historia del repositorio incluyendo todas las ramas. Ejercicio 4 Fusionar la rama bibliografia con la rama master. Mostrar la historia del repositorio incluyendo todas las ramas. Eliminar la rama bibliografia. Mostrar de nuevo la historia del repositorio incluyendo todas las ramas. Ejercicio 5 Crear la rama bibliografia. Cambiar a la rama bibliografia. Cambiar el fichero bibliografia.txt para que contenga las siguientes referencias: Scott Chacon and Ben Straub. Pro Git. Apress. Ryan Hodson. Ry\u2019s Git Tutorial. Smashwords (2014) A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d Cambiar a la rama master. Cambiar el fichero bibliografia.txt para que contenga las siguientes referencias: Chacon, S. and Straub, B. Pro Git. Apress. Loeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d Fusionar la rama bibliografia con la rama master. Resolver el conflicto dejando el fichero bibliografia.txt con las referencias: Chacon, S. and Straub, B. Pro Git. Apress. Loeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly. Hodson, R. Ry\u2019s Git Tutorial. Smashwords (2014) A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cResuelto conflicto de bibliograf\u00eda.\u201d Mostrar la historia del repositorio incluyendo todas las ramas. Ejercicios de repositorios remotos Ejercicio 1 Crear un nuevo repositorio p\u00fablico en GitHub con el nombre libro-git. A\u00f1adirlo al repositorio local del libro. Mostrar todos los repositorios remotos configurados. Ejercicio 2 A\u00f1adir los cambios del repositorio local al repositorio remoto de GitHub. Acceder a GitHub y comprobar que se han subido los cambios mostrando el historial de versiones. Ejercicio 3 Colaborar en el repositorio remoto libro-git de otro usuario. Clonar su repositorio libro-git. A\u00f1adir el fichero autores.txt que contenga el nombre del usuario y su correo electr\u00f3nico. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido autor.\u201d Subir los cambios al repositorio remoto. Debemos tener permisos por parte del compa\u00f1ero para poder subir cambios al repositorio. Ejercicio 4 Hacer una bifurcaci\u00f3n del repositorio remoto asalber/libro-git en GitHub. Clonar el repositorio creado en la cuenta de GitHub del usuario. Crear una nueva rama autoria y activarla. A\u00f1adir el nombre del usuario y su correo al fichero autores.txt. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido nuevo autor.\u201d Subir los cambios de la rama autoria al repositorio remoto en GitHub. Hacer un Pull Request de los cambios en la rama autoria. Le damos al bot\u00f3n fork y creamos un nombre, que en nuestro caso le pondremos solamente el n\u00famero 2.","title":"Ejercicios Git y GitHub 2"},{"location":"Ejercicios2/#ejercicios-git-y-github-2","text":"","title":"Ejercicios Git y GitHub 2"},{"location":"Ejercicios2/#ejercicios-de-creacion-y-actualizacion-de-repositorios","text":"","title":"Ejercicios de Creaci\u00f3n y Actualizaci\u00f3n de Repositorios"},{"location":"Ejercicios2/#ejercicio-1","text":"Configurar Git definiendo el nombre del usuario, el correo electr\u00f3nico y activar el coloreado de la salida. Mostrar la configuraci\u00f3n final:","title":"Ejercicio 1"},{"location":"Ejercicios2/#ejercicio-2","text":"Crear un repositorio nuevo con el nombre libro y mostrar su contenido.","title":"Ejercicio 2"},{"location":"Ejercicios2/#ejercicio-3","text":"Comprobar el estado del repositorio. Crear un fichero indice.txt con el siguiente contenido: Cap\u00edtulo 1: Introducci\u00f3n a Git Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico Cap\u00edtulo 3: Repositorios remotos Comprobar de nuevo el estado del repositorio. A\u00f1adir el fichero a la zona de intercambio temporal. Volver a comprobar una vez m\u00e1s el estado del repositorio.","title":"Ejercicio 3"},{"location":"Ejercicios2/#ejercicio-4","text":"Realizar un commit de los \u00faltimos cambios con el mensaje \"A\u00f1adido \u00edndice del libro\" y ver el estado del repositorio.","title":"Ejercicio 4"},{"location":"Ejercicios2/#ejercicio-5","text":"Cambiar el fichero indice.txt para que contenga lo siguiente: Cap\u00edtulo 1: Introducci\u00f3n a Git Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico Cap\u00edtulo 3: Gesti\u00f3n de ramas Cap\u00edtulo 4: Repositorios remotos Mostrar los cambios con respecto a la \u00faltima versi\u00f3n guardada en el repositorio. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas\u201d.","title":"Ejercicio 5"},{"location":"Ejercicios2/#ejercicio-6","text":"Mostrar los cambios de la \u00faltima versi\u00f3n del repositorio con respecto a la anterior. Cambiar el mensaje del \u00faltimo commit por \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice.\u201d Volver a mostrar los \u00faltimos cambios del repositorio.","title":"Ejercicio 6"},{"location":"Ejercicios2/#ejercicios-de-manejo-del-historial-de-cambios","text":"","title":"Ejercicios de manejo del historial de cambios"},{"location":"Ejercicios2/#ejercicio-1_1","text":"Mostrar el historial de cambios del repositorio. Crear la carpeta capitulos y crear dentro de ella el fichero capitulo1.txt con el siguiente texto. Git es un sistema de control de versiones ideado por Linus Torvalds. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 1.\u201d Volver a mostrar el historial de cambios del repositorio.","title":"Ejercicio 1"},{"location":"Ejercicios2/#ejercicio-2_1","text":"Crear el fichero capitulo2.txt en la carpeta capitulos con el siguiente texto. El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 2.\u201d Mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores.","title":"Ejercicio 2"},{"location":"Ejercicios2/#ejercicio-3_1","text":"Crear el fichero capitulo3.txt en la carpeta capitulos con el siguiente texto. Git permite la creaci\u00f3n de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simultanea en ellas. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3.\u201d Mostrar las diferencias entre la primera y la \u00faltima versi\u00f3n del repositorio.","title":"Ejercicio 3"},{"location":"Ejercicios2/#ejercicio-4_1","text":"A\u00f1adir al final del fichero indice.txt la siguiente l\u00ednea: Cap\u00edtulo 5: Conceptos avanzados A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 5 al \u00edndice.\u201d. Mostrar qui\u00e9n ha hecho cambios sobre el fichero indice.txt.","title":"Ejercicio 4"},{"location":"Ejercicios2/#ejercicios-de-deshacer-cambios","text":"","title":"Ejercicios de deshacer cambios"},{"location":"Ejercicios2/#ejercicio-1_2","text":"Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Comprobar el estado del repositorio. Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero. Volver a comprobar el estado del repositorio.","title":"Ejercicio 1"},{"location":"Ejercicios2/#ejercicio-2_2","text":"Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. A\u00f1adir los cambios a la zona de intercambio temporal. Comprobar de nuevo el estado del repositorio. Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo. Comprobar de nuevo el estado del repositorio. Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero. Volver a comprobar el estado del repositorio.","title":"Ejercicio 2"},{"location":"Ejercicios2/#ejercicio-3_2","text":"Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Eliminar el fichero capitulos/capitulo3.txt. A\u00f1adir un fichero nuevo capitulos/capitulo4.txt vac\u00edo. A\u00f1adir los cambios a la zona de intercambio temporal. Comprobar de nuevo el estado del repositorio. Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo. Comprobar de nuevo el estado del repositorio. Deshacer los cambios realizados para volver a la versi\u00f3n del repositorio. Volver a comprobar el estado del repositorio.","title":"Ejercicio 3"},{"location":"Ejercicios2/#ejercicio-4_2","text":"Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo. Eliminar el fichero capitulos/capitulo3.txt. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d Comprobar el historial del repositorio. Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal. Comprobar el historial y el estado del repositorio. Volver a hacer el commit con el mismo mensaje de antes. Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio. Comprobar de nuevo el historial y el estado del repositorio.","title":"Ejercicio 4"},{"location":"Ejercicios2/#ejercicios-de-gestion-de-ramas","text":"","title":"Ejercicios de gesti\u00f3n de ramas"},{"location":"Ejercicios2/#ejercicio-1_3","text":"Crear una nueva rama bibliografia y mostrar las ramas del repositorio.","title":"Ejercicio 1"},{"location":"Ejercicios2/#ejercicio-2_3","text":"Crear el fichero capitulos/capitulo4.txt y a\u00f1adir el texto siguiente En este cap\u00edtulo veremos c\u00f3mo usar GitHub para alojar repositorios en remoto. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido cap\u00edtulo 4.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.","title":"Ejercicio 2"},{"location":"Ejercicios2/#ejercicio-3_3","text":"Cambiar a la rama bibliografia. Crear el fichero bibliografia.txt y a\u00f1adir la siguiente referencia Chacon, S. and Straub, B. Pro Git. Apress. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adida primera referencia bibliogr\u00e1fica.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.","title":"Ejercicio 3"},{"location":"Ejercicios2/#ejercicio-4_3","text":"Fusionar la rama bibliografia con la rama master. Mostrar la historia del repositorio incluyendo todas las ramas. Eliminar la rama bibliografia. Mostrar de nuevo la historia del repositorio incluyendo todas las ramas.","title":"Ejercicio 4"},{"location":"Ejercicios2/#ejercicio-5_1","text":"Crear la rama bibliografia. Cambiar a la rama bibliografia. Cambiar el fichero bibliografia.txt para que contenga las siguientes referencias: Scott Chacon and Ben Straub. Pro Git. Apress. Ryan Hodson. Ry\u2019s Git Tutorial. Smashwords (2014) A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d Cambiar a la rama master. Cambiar el fichero bibliografia.txt para que contenga las siguientes referencias: Chacon, S. and Straub, B. Pro Git. Apress. Loeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d Fusionar la rama bibliografia con la rama master. Resolver el conflicto dejando el fichero bibliografia.txt con las referencias: Chacon, S. and Straub, B. Pro Git. Apress. Loeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly. Hodson, R. Ry\u2019s Git Tutorial. Smashwords (2014) A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cResuelto conflicto de bibliograf\u00eda.\u201d Mostrar la historia del repositorio incluyendo todas las ramas.","title":"Ejercicio 5"},{"location":"Ejercicios2/#ejercicios-de-repositorios-remotos","text":"","title":"Ejercicios de repositorios remotos"},{"location":"Ejercicios2/#ejercicio-1_4","text":"Crear un nuevo repositorio p\u00fablico en GitHub con el nombre libro-git. A\u00f1adirlo al repositorio local del libro. Mostrar todos los repositorios remotos configurados.","title":"Ejercicio 1"},{"location":"Ejercicios2/#ejercicio-2_4","text":"A\u00f1adir los cambios del repositorio local al repositorio remoto de GitHub. Acceder a GitHub y comprobar que se han subido los cambios mostrando el historial de versiones.","title":"Ejercicio 2"},{"location":"Ejercicios2/#ejercicio-3_4","text":"Colaborar en el repositorio remoto libro-git de otro usuario. Clonar su repositorio libro-git. A\u00f1adir el fichero autores.txt que contenga el nombre del usuario y su correo electr\u00f3nico. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido autor.\u201d Subir los cambios al repositorio remoto. Debemos tener permisos por parte del compa\u00f1ero para poder subir cambios al repositorio.","title":"Ejercicio 3"},{"location":"Ejercicios2/#ejercicio-4_4","text":"Hacer una bifurcaci\u00f3n del repositorio remoto asalber/libro-git en GitHub. Clonar el repositorio creado en la cuenta de GitHub del usuario. Crear una nueva rama autoria y activarla. A\u00f1adir el nombre del usuario y su correo al fichero autores.txt. A\u00f1adir los cambios a la zona de intercambio temporal. Hacer un commit con el mensaje \u201cA\u00f1adido nuevo autor.\u201d Subir los cambios de la rama autoria al repositorio remoto en GitHub. Hacer un Pull Request de los cambios en la rama autoria. Le damos al bot\u00f3n fork y creamos un nombre, que en nuestro caso le pondremos solamente el n\u00famero 2.","title":"Ejercicio 4"}]}